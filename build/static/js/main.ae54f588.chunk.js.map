{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Filter","_ref","onChange","React","createElement","Fragment","placeholder","PersonForm","addInfo","newName","handleNameChange","handleNumberChange","newNumber","onSubmit","value","type","Persons","props","onClick","map","person","key","id","name","number","baseUrl","notes","axios","get","then","response","data","newObject","post","put","concat","delete","Notification","message","className","Header","App","useEffect","phoneService","initialNotes","setPersons","setCopyPersons","_useState","useState","_useState2","_slicedToArray","persons","_useState3","_useState4","copypersons","_useState5","_useState6","setNewName","_useState7","_useState8","setNewNumber","_useState9","_useState10","searchName","setSearchName","_useState11","_useState12","confirmMessage","setconfirmMessage","event","target","filter","toLowerCase","includes","preventDefault","noteObject","string1","string2","i","length","JSON","stringify","isEqual","window","confirm","returnPerson","returnedPhone","filteredPerson","find","personName","personId","catch","error","setTimeout","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ae54f588.chunk.js","sourcesContent":["import React from 'react'\r\nconst Filter = ({onChange}) => {\r\n    return (\r\n        <>\r\n        Filter shown with <input onChange={onChange} placeholder=\"Search name\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = ({addInfo, newName , handleNameChange, handleNumberChange, newNumber}) => {\r\n    return (\r\n        <>\r\n        <form onSubmit={addInfo}>\r\n          <div>\r\n            name: <input value={newName} onChange={handleNameChange}/>\r\n          </div>\r\n          <div>\r\n            number: <input value={newNumber} onChange={handleNumberChange}/>\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Persons = ({props, onClick}) => {\r\n    return (\r\n        <>\r\n        {props.map((person => <div key={person.id}>{person.name} {person.number} <button onClick={() => onClick(person.id)}>delete</button></div>))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Persons ","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst delPerson = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, delPerson }","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n      }\r\n    \r\n      return (\r\n        <div className='error'>\r\n          {message}\r\n        </div>\r\n      )\r\n}\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport phoneService from './services/notes' \nimport Notification from './components/Notification'\nimport './index.css'\n\n// Header component \nconst Header = ({name}) => {\n  return (\n    <h1>{name}</h1>\n  )\n}\n\n/*\n * isEqual function - If the new created object (string1) \n * is equals to one of the existing object in useState(persons)\n * Then, set the the id of string1 to string2 in case the user want to update it \n * If we don't update the id, the existing phone book user will have a new id \n * This is basically .filter() function \n*/ \nfunction isEqual(string1, string2) {\n  for (let i = 0; i < string2.length; i++) {\n    if(JSON.stringify(string1.name) === JSON.stringify(string2[i].name)) {\n      string1.id = string2[i].id\n      return true; \n    }\n  }\n  return false; \n}\n// * The main component \nconst App = () => {\n\n\n  // 1st. fetching data from db.json \n  useEffect(() => {\n    phoneService.getAll().then(initialNotes => {\n      setPersons(initialNotes)\n      setCopyPersons(initialNotes)\n    })\n  }, [])\n\n\n// Use state const \n  const [persons, setPersons] = useState([]) //Main db.json data \n  const [copypersons, setCopyPersons] = useState(persons) //copy of db.json data \n\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [searchName, setSearchName] = useState('')\n  const [confirmMessage, setconfirmMessage] = useState('')\n\n  const handleNameChange = (event) => {\n      setNewName(event.target.value)\n      }\n    \n      const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n      } \n\n\n    // Add user / update user \n    const addInfo = (event) => {\n        event.preventDefault()\n        const noteObject = {\n          name: newName,\n          number: newNumber\n          //it is better for the program to determine the app to prevent duplicate\n        }\n\n          if(isEqual(noteObject, persons) === true) {\n            if(window.confirm(`${noteObject.name} is already added to the phonebook, replace the old number with a new one?`)) {\n              phoneService.update(noteObject.id, noteObject).then(returnPerson => {\n                /*\n                 * If the user confirm to update their name in the phone\n                 * Then, call axios update function in notes.js to delete the person\n                 * Then return every other person that does not match the noteObject id in new array\n                 * Otherwise, return the existing noteObject (returnPerson)\n                 */\n                setCopyPersons(copypersons.map(person => person.id !== noteObject.id ? person : returnPerson))\n                setPersons(persons.map(person => person.id !== noteObject.id ? person : returnPerson))\n                setconfirmMessage(`${noteObject.name} change has been implemented.`) })} \n            /**\n             * Else, add the new person to the phonebook using the create method \n             * then concat the new person to the useState of persons and copy persons \n             * in order to display it under <Person/> for render \n             * Then reset the default useState to empty \n             */\n           } else {\n            phoneService.create(noteObject).then(returnedPhone => {\n              setPersons(persons.concat(returnedPhone))\n              setCopyPersons(copypersons.concat(returnedPhone))\n              setconfirmMessage(`${noteObject.name} added to the phonebook`)\n            })\n            setNewName('')\n            setNewNumber('')\n          }\n    } //End of addInfo\n\n    // Name Search \n    const handleNameSearch = (event) => {\n        setSearchName(event.target.value) //Set the search name value to user input \n        // Filter every person name until it matches the searchName value \n        const searchPerson = () => persons.filter(person => person.name.toLowerCase().includes(searchName))\n        // Then set the matched value finds in person to set it in set copy persons \n        setCopyPersons(searchPerson);\n        // If user delete the search bar, which makes it null/empty, then revert back to the original phonebook \n        if(event.target.value === '') {\n          setCopyPersons(persons)\n        }\n      }\n\n\n\n      //Delete phonebook T_T \n      const deletePerson = id => {\n        const filteredPerson = persons.find(person => person.id === id)\n        const personName = filteredPerson.name\n        const personId = filteredPerson.id\n\n        if (window.confirm(`Delete ${personName} ?`)) {\n          phoneService.delPerson(personId).catch(error => {\n            setconfirmMessage(`${personName} already deleted!`) \n            setTimeout(() => {\n              setconfirmMessage(null)\n            }, 5000)\n          })\n          setPersons(persons.filter(person => person.id !== personId))\n          setCopyPersons(persons.filter(person => person.id !== personId))\n        } \n      }\n\n    // Renders \n    return (\n      <div>\n        <Notification message={confirmMessage}/>\n        <Header name=\"Phonebook\"/>\n        <div>\n          <Filter onChange={handleNameSearch}/>\n        </div>\n        <Header name=\"Add a new\"/>\n        <PersonForm addInfo={addInfo} newNumber={newNumber} newName={newName} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange}/>\n        <Header name=\"Numbers\"/>\n        <Persons props={copypersons} onClick={deletePerson}/> \n      </div>\n    )\n}\nexport default App\n/*\nPhonebook Part 1 \n\n\n*/","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\n\n  ReactDOM.createRoot(document.getElementById('root')).render(<App />)\n"],"sourceRoot":""}